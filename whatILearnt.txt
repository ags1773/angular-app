*************************************
**      Directives - Deep Dive     **
*************************************

Custom structural directives:

We've made an 'unless' directive, which is opposite of ngIf in the sense that it attaches the content to the DOM if the
condition is false.

--------------------------------------------------------------------------------
We want to take the condition as input, and execute a method whenever the condition changes. So we use a setter

@Input('appUnless') set unless(condition: boolean){
  if(!condition){
    //display template
  } else{
    //clear template
  }
}

Note that we're using alias 'appUnless', because that's the name of the directive that we're going to use in our HTML
--------------------------------------------------------------------------------
In order for the directive to work, we need two things:
  1) WHAT to display
  2) WHERE in the DOM to display
Both these can be injected

<ng-template [ngIf]="!onlyOdd">
  <li class="list-group-item"
      *ngFor="let even of evenNumbers"
      [ngStyle]="{backgroundColor: number%2 !== 0 ? 'powderblue':'tomato'}">
    {{ even }}
  </li>
</ng-template>

Solution to (1) -- use TemplateRef, we can get access to all the stuff within the <ng-template></ng-template> html tags
Solution to (2) -- use ViewContainerRef to get the Location in the DOM where we place our template
--------------------------------------------------------------------------------
